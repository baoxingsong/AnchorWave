//
// Created by song on 9/19/18.
//

#include "../../googletest/googletest/include/gtest/gtest.h"
#include <string>
#include <iostream>
#include <sstream>
#include "../../myImportandFunction/alignSlidingWindow.h"
#include "../../minimap2/ksw2.h"
#include <stdlib.h>
#include <assert.h>
#include <stdio.h>

TEST(needleAlignment, c20){

    std::vector<std::string> align_queries;
    std::vector<std::string> align_refs;

    int32_t matchingScore = 0;
    int32_t mismatchingPenalty = -3;
    int32_t _open_gap_penalty1 = -4;
    int32_t _extend_gap_penalty1 = -2;
    int32_t _open_gap_penalty2 = -80;
    int32_t _extend_gap_penalty2 = -1;

    align_refs.push_back ("CCTATGGCACAGCGGTT---GCTTGCGCGGTCACCGGCGACTGGTCGATT");
    align_refs.push_back ("CCTATGGCACAGCGGTTGGCGCTTGCGC---CACCGGCGACTGGTCGATT");
    align_queries.push_back("CCTATGGCACAGCGGTTGGCGCTTGCGCACCGGCGACTGGTCGATT");
    align_queries.push_back("CCTATGGCACAGCGGTTGGCG--CGGTCACCGGCGACTGGTCGATT");

    std::vector<std::stack<char>> SQs(align_queries.size());
    std::vector<std::stack<char>> SRs(align_refs.size());

    int32_t score = needleAlignment(align_refs, align_queries, SQs, SRs, mismatchingPenalty,
                                    _open_gap_penalty1,_extend_gap_penalty1, _open_gap_penalty2, _extend_gap_penalty2);
    std::vector<std::string> _alignment_qs(align_queries.size());
    std::vector<std::string> _alignment_ds(align_refs.size());
    while (!SQs[0].empty()) {
        for ( int k=0; k<align_refs.size(); ++k ){
            _alignment_ds[k] += SRs[k].top();
            SRs[k].pop();
        }
        for( int l=0; l<align_queries.size(); ++l ){
            _alignment_qs[l] += SQs[l].top();
            SQs[l].pop();
        }
    }
    for ( int k=0; k<align_refs.size(); ++k ){
        std::cout <<_alignment_ds[k]<< std::endl;
    }
    for( int l=0; l<align_queries.size(); ++l ) {
        std::cout << _alignment_qs[l] << std::endl;
    }

    std::cout << score << std::endl;
    ASSERT_EQ(0, 0);
}

TEST(needleAlignment, c1){

    std::stack<char> SQ;
    std::stack<char> SD;
    int32_t matchingScore = 0;
    int32_t mismatchingPenalty = -4;
    int32_t _open_gap_penalty1 = -4;
    int32_t _extend_gap_penalty1 = -2;
    int32_t _open_gap_penalty2 = -80;
    int32_t _extend_gap_penalty2 = -1;

//    std::string _dna_d = "atc";
//    std::string _dna_q = "AAGGTCGTCTTGCTGTTCAGAGGTTTTACCAACAGAAGAACATAATGAATTGGATGGCATGCTACGTCGTATTCTCTTTTTTTGTTGATCCCTGAGTTGATACATTTTGTACTTGATACATGAGTTGCAGCAGCAGCAGCAACAGCCTTCTGTACCTTGGCTTTGGATCTGTATTCTTGTCACCAGTTATCTGAAAGCATCAATAACCTTCTGTCTTCTAGCAGTTGCCTCTCCAGATTGCCAAAATAGCATTTATTATAAGGTCTTATGCAATGTTTTCAGATTGTTCCGATTAAATCTACGATTAGCATTTTAGCCCAGCAGTCCAGCCCATTGAAGGCTTATTCAGTTATTTTTAATCCATATAAATCAAAAAAGATTGATATAGATTAGAAAATATTTTAGTTTACTAGGAATTAAAACCCCTCAATTTTTCTTAATCCATATAAATTGTGGCAGAACTGAACAATCCGGTGCCCATAAGCAACACGGCTGCCAGCCTGCCAGACCGCCCAGCCCAGGTGCCCACACCCAGCTGCCACTCCGCAAGCGACCGCCGTGAGCCGAACTGAGGAACCGGCGACGGATACAGCGGCAGCTCCCTCCTCCTCCGTCCCGGCGCAGCTGCGCCCGGTTGATTTGGTGACAATAGGATCATAGGGGATTAGAGAAGATTGAGGAAAAATAAACTAATTTTTCCTTTAATCCTTTCTAATCTTCCCATGATACCGAATCACCAAATCAGCTCTGATGCTGCAGGTAGGGCTCCCGGGCTCCACGCCTCCACCTTTTTTCCCTAGTCCCCACTCCCCAATACACGTTCATCTCTTCTAGTGCTAGGTAACTGTGATTGTGGCCTGTGGGTGCTCGGTTTAGATTTAGACTGCTGAATGATGAATGCTGATGAGGGCGATCAGAAAAGATCATCCGATTAGAAAACATTGGTATTATGGTTTTTTCATAATAATATACATTGACTTTTTGTTCTCCAACTAATTAAATGATATATCTTTTTTTTGGTAACCATGTATAACCACGCTTTTTATCTGGAGAAAGAGAAATTTTACAACACTATCCTTGCAAAGCGAATTTCACAAGGAGCATCAACAAAGTTAAATAGCAGCTAATTACATGACTACATGAGAAAGAGGCAACTGAAGATGAAACACAAAGTAGCAGCTAAAAACAAACACTCTTTAGAGCATCTCTAACAATGCCTCAAACTTGTGTCTCAAATTGAAATAAATGGCTTCACGTAGAAAAACTACTCCAACAGTGTCTTATTTTACAAAATTTGGTTAAAAAATATAGAGCACCCTCTCAAGTGCCTCAAATATACTGCACTATAGTGGGCTGTCCTATAATATAGATTTGGTGCTTTACTGTTGAAACAGAATATTTTGTTAGTACACTAAATCATATAAAATATACTAATTTTTAAATTATATGACACTTTTATAAGCCAAGCTGTTGAAGATGATCTTAGGCTGCTGGAGACAGCCGCGGCAAACTCCCCCACTCCCTGCAAAGCCTGCCGTACGAAGTGAACACAAAGAACGCAACAATCTGTGTCATCACACAACCATGCATGGGGCATCACAACTATTTAACGAACGTCC";

//    std::string _dna_d = "AAGGTCGTCTTGCTGTTCAGAGGTTTTAATCAATATAATATCTAAATTTATTATTTTAATTGATGGCTTTTATGGTGTTACACACAACCATGCATGGGGCATCACAACTATTTAACGAACGTCT";
//    std::string _dna_q = "AAGGTCGTCTTGCTGTTCAGAGGTTTTCTGCAAAGCCTGCCGTACGAAGTGAACACAAAGAACGCAACAATCTGTGTCATCACACAACCATGCATGGGGCATCACAACTATTTAACGAACGTCC";

//    std::string _dna_d = "TAGTGTATATACGTGCACAACAAGAGCCTCACCCCGGCGGCGTGGCTTTTGGCGAATTAATGGCCTGGACAAATTACACGCAGGATGACTCTCGTATTTCATGTTGCGAACCACTCCGGCGAATCACGCAGAAACCGTTACAACCCCGGGTATGGCTAGAATCTCCCTCAAGCTGTACTAGTTCGTGTGTTTTATATCTTGGGTAACTCGCAAGAGTTCATCTGCCGTGCTCAAACCGCTCGCCTCCTCAGTATTAACTCTCCTTACAGGCGGACATCTGCGTTTCTCCGCCTCTCTACCCGTTTTCATCTGGCAGATAACTTACAATCGGCTCTTACACGAGGGTGCTTTCTGAGTGTAATCTTGACGAGAACTGCTGTATGTCGAGAGCGGCCAACGCACAATGACGCCCAATGTGTCCTTGTTTGGCACTGCTGATCCCTGAATGTTGACGGTGCTCTTCATATTTTGATTTGGGCCCAGCTGGCGCATTAGATGCACTATACCTTCGGATAGATGGGCCCCATGCTGATTTATGCTCTACGACGCGCAGATGGCTATGTCGTCCTGACGAGTACCCGCTAACGTACCTTTATGCTATGTCTCACTGTTGTTGCCCATCAATATCTCCCTCACTTGGCAGTGAGAAGATCGATGTCGCCGATCGGGAACTAAGTTTGGAAGGAATCTCCATGATTACAGGCCCCAATGCTGACGCTGGAGATGGGCTTGCCGAGGCTCCGTACTCCGTTTATTACCGCAGCTAGCGAGAATATATCGGCTTCGAAAATCATGGATACTTTCTAGAATACCGCTTTTTAGCCAAACCTGAGCGGAACACAAGATTATGAGTCGAAAGTGCTCCGAATAAAGCGATAGGGATGCGGATATCCCCCCTTTTCTCCGTCCCGTGGGTGAGCGGTACCACAAACTCTAGCTAAAGGCCCGGACGATAATTCCTATCGCCCAGGCAGATCTCCAGGGGCACTCATCGTCTGTAGATCTTCCTCACCAATCCCTTACAGAGTTCAGCTAAGCGTCGTCCGAAACTAGGGTTTGTCTTTATCCTGTGATACCAATCCCTCACCACGAATGCCACCTTAAGACCTTTGATTTGGACACCATGGTGAAACTTTAAGTTTCGACGGATAATTGTTATAATGGGTAGTAACCCCAGTCAGGTCCTTATGTATGATGTCCAGAGGCCTCATAGACTCACTAACGAAATAAGATCAGTCTTCCTGTCGTGGTCGTTTGTTGCTCACTGAAAGGCTCGTGCTGTGTCGGTTTTCGGTCCATCCCGGTTGCATGCCATGTGATCATGTTAAATAGTGTACGGCACAGTATTAACCACAGATTCCTATAAAGGCCTTTAGAAGCTGTAGTGTACGTAGGTCACCAGGACCGTTATCCCTACGTAAACGTAGTTTGCAATAACCAATCGAGAATGTACCATCCAGTCCCTGCTGAGTCCATTCTTCGGAACGCCCCTGGCTACTTGAACAGTAATGCGTGCTGTGCGCGTACCCTCTTACGCAATAGACCTCAGTACGTCCCGAGAACTCTAGTAGTCCTATTTCGTGCGCTCGTGCAAAGACATCGCGGCTCATCAAGATCAGCGAGATCCGGCCTTGGCTTCCGCTTAGATACGGTCAGTAGATTCCAGTTACTTCTTGACCCGCACTTGCCGAGGGATTTCGGGTTACTGTTACACAGATTTCGCGAGGTGTTACGAGGGTTACGCCAGGATGATCGAGCAACTTCGTCCGATGCCACTACCATAATCAATGCGTGCCACCACTATCAGTCCAGTGAGTACTAAATTACAGATGGTCCGTAAGGTATGCATCGGAAAGCAGGATGGTCTCACAGCACTCCACACTAGGTTTCGGCTTATCGCGCCACTGGATGTCCACGCGCCTACAATACAGAGAGCGAGGCATGTCAAAGACGATTATAAGGTTCAAAACCTCGACTTTACAGGCTTAGGGACTCGTATT";
//    std::string _dna_q = "TGGTTTCACAACGACGAGCATTAGATTCGGAAACAACCAACCTACGTATTGTCGTGCCCACAGAGTCGAACGGTCAGAGCACCTGTGCCAGAGAGTGCGATTGCTGACGAGCCAGCAAGCGAAACTGGGGTGCATGGTTACCCGACAGCAATAGGCTTGAATCATGAGCTACTGGGCCACGATAATGCATGGACTATTAAAGGTAGCTAGGTGGAGCGGCCCTACGAATTTAAACTCTCGGCGTGACATTGATGTGGCGGACACTGTCCGCCTACCCCTCGCGAGATTTGCTTTTCAATCTCGATTAGGGTTCAGGCAGCTTAACGCGGGATGATGTCGCGATGTCATATTGAACGCCCAAAGTAGTCTTCTAACGCCCTAGTGGAGCGTCATACACCTCAAAGCCACGGTACATGAGTCCCTCCGAAAGGATGGAGCTGCAAGAAGGTTGTATTGGGACTTCAAGTCTTTTCGTTGTCTCCGGTAGCACCTCGGTAGGACAAAGTCTTCTACGCCTGTCTCTGCAACCAGGTATGAGCCTTCCTACGCCTGGATAGCTAGCAGCTTCGCGTTCTTCCGCGCGGATGGACACATATGCAGAGACTGATTAGTATGGCCTAAGTTTGCTCATCTCATGAGTTTCCTAATCTCTGCGTCTCTTGTAGGAAAGACAAGGTTGAAGTCCAACCTATCTAAGCAAATAGTCCACGAATGAGCAAGGCCGGGCCCAGAGGCCAGACCCGGGAAAAACTTATTACTCTCGCTAAGAATGGAGTTCCGGCTGAGCACATTATGCATTACGTCGTGGTAGCCGTTGGACATGGCTGTCGACCGGCGAATTAACACCGTAAAGTTATTCGCGCCCGGCGGAACGCAGCTGTTGCCGGATGACCCCGATGGTGTCATGCCCGTCGTGGATCAGATCCTGGCATTCTCGGTTAAGAACCCTTGAGCGATTACTCTGACGCGCGTATTTGGTCAGCCGGTAAAGTCGGTACTAGATCTTCCTCACCAATCCCTTACAGAGTTCAGCTAAGCGTCGTCCGAAACTAGGGTTTGTCTTTATCCTGTGATACCAATCCCTCACCACGAATGCCACCTTAAGACCTTTGATTTGGACACCATGGTGAAACTTTAAGTTTCGACGGATAATTGTTATAATGGGTAGTAACCCCAGTCAGGTCCTTATGTATGATGTCCAGAGGCCTCATAGACTCACTAACGAAATAAGATCAGTCTTCCTGTCGTGGTCGTTTGTTGCTCACTGAAAGGCTCGTGCTGTGTCGGTTTTCGGTCCATCCCGGTTGCATGCCATGTGATCATGTTAAATAGTGTACGGCACAGTATTAACCACAGATTCCTATAAAGGCCTTTAGAAGCTGTAGTGTACGTAGGTCACCAGGACCGTTATCCCTACGTAAACGTAGTTTGCAATAACCAATCGAGAATGTACCATCCAGTCCCTGCTGAGTCCATTCTTCGGAACGCCCCTGGCTACTTGAACAGTAATGCGTGCTGTGCGCGTACCCTCTTACGCAATAGACCTCAGTACGTCCCGAGAACTCTAGTAGTCCTATTTCGTGCGCTCGTGCAAAGACATCGCGGCTCATCAAGATCAGCGAGATCCGGCCTTGGCTTCCGCTTAGATACGGTCAGTAGATTCCAGTTACTTCTTGACCCGCACTTGCCGAGGGATTTCGGGTTACTGTTACACAGATTTCGCGAGGTGTTACGAGGGTTACGCCAGGATGATCGAGCAACTTCGTCCGATGCCACTACCATAATCAATGCGTGCCACCACTATCAGTCCAGTGAGTACTAAATTACAGATGGTCCGTAAGGTATGCATCGGAAAGCAGGATGGTCTCACAGCACTCCACACTAGGTTTCGGCTTATCGCGCCACTGGATGTCCACGCGCCTACAATACAGAGAGCGAGGCATGTCAAAGACGATTATAAGGTTCAAAACCTCGACTTTACAGGCTTAGGGACTCGTATT";

    std::string _dna_d = "CCTATGGCACAGCGGTTGGCGCTTGCGCGGTCACCGGCGACTGGTCGATTGGCTTGTTAAATGCGTATGGGACATATCTTAAGCAAAGTCATGAGTGTGCATGAGATAGTCGCAGTTCTTTGACACAGTATTAATTTCAATCCTAACTAAGACCAATAACATCCAGAAGGTCGTACTCAACAGCGGGTACGTTTGACGTGTGATCTAGTTTGGCTCCCGCCAGCATATAGATGGTAAAGCATGTCTAAGATCAGGCTCTTCCCTATGCCTGGCATATGGTCATCGCGTGATTGAGTCTCCAGGGTTCAATAACGACGCCTTTGATGTTTTATTGTACCGACTGAGGTTTTCACGACTGTAGAGAGTATAGGAACTATCTAGCCTCGCTGCTTAAACATTCGAGCGGATTGAAATATTGCGGATTCTTCCATTGGATTCAAAGCATCTCCCGAGCTTCATTCGTGTGTGGCAACAAGCGAAAGTCCGACCGTAAGTGAATGCCCTTGACGGACTTCGGTGTTAAGGGCTATGGACTTCTCGGTTTCGTATGGATCTGCGGAATTGCTGTAGATACATAGGGAGAGTGGGCAACGATCTCCCGCGGTAGAGTGGTATGTGTGACCGGTGAAGTTTTAGTCATCTATTATTCCTCCCGGCATCGAAGCGCTCAGCCACTGCTTATCACATGATCTGTCCCAGCGTTGGCGCCTTATCGGAAAATTACTCTCCGCGCCATGTCTTCAGTAGATACATAACGATTTGTATGACGGTTGGACCGTAACGTAATTGAGAGGGTTAGCGGCATGCTGTTGCGGATCTCAGTGAAGGGCTGTCTATATCTTGAACCCTAGAATACTGGTTACAGGAGCTCCGCGTTCCACCGAGTAATCCTAATTCGTCCCAGAGATATGTTCGAAAACTAGTCCGGCATGCCCGTGTATCTCAACAATGGATATGTCCTTGCATCGGTGGGCGCCGGTATTGGAGCAGTTATCCCGGCTACAATGGAGATTTAGAACTATATGCCTTTACAAGGCTAACCTCGACTTTAGTGTGCCCATCTCGAACAGTTTGCGGTGAATGGCTCTCACAGTTTCACTGGCCAAGTTGCCTAATAACGCAGCCCCTAGTTACAAAGAGACCACAATTGACCTGCATCAGTTCACATACCAGATTCGATTTTGTACCACCCGCGTTGGTGGAGTCGCCGAACGCCCGGAAACGGCTCCGCGCAGCAGCTTTTTCGGTAGCTCTGATAGACAGGCATGACGTTAGTTAGTTGAATTAAACCAAGGAGGAACGGCGTTGCGGGCCACGCCTTCAGACAGAAGGCTTGAATTTTGGACGCATTCAATCTAATATGAGCTCACTGTCACATCGACGAAGAGCTGGACAGCGTACTTGCCGATTTGGGAACAGATTACCGTACCGATGAAGGAAAGATCTGTGACCTATATTTCCGAATCTTTCCGCTATTTCTAAGTAAAAACCGTGAAGACAATGTTCCCGGGCCACTGGTACTGATCCCCGGGCCCAGCACGGAGGTCAGCTCAAGGGTCCGTTCTTGGTTTGCTACAGTCGCTTTTTTATCGCACCTCGCCCATGGACACTTGTGAATGTACTCTATTCCGTCTGAGTTTCGTCTAATGCTCCTACCCATTACGTGCTATGACGGCGGCAGCTAATAAGGTTCATGAATATCGGTCAAAGAGGACTGCTTAATAACAGGAGACTTTAACCCTAGAGTGTCAGATAAAAGACTCTCGAAGCTGCGTAACAATCTGTGACCCGGCACGGTTAGTCAACACCCTTGTCAACATAAGCGGCAGCACACGCGAAGTTAGGAAGCAGACCGCTGATTCGTATGCTAGTCTTCCAAGACGTAGGTTTCACCTTCATGGGACCCGGACCCGGGTTAGATTACTAAATCGGGTATCAGTAGCTGTAAGTGAATTAGGAGTACTCTGACCTATACGCAGAGCGTGAGTCCCCACTGCCCG";
    std::string _dna_q = "AGTATCCCGACGCGGTTACTGCTTAAGCGGCTAACGTCCGCCGTTCCATGGGCTTCCTAGATTCCAAGGGATCTTGCGCTCTCATGAGGCATTTGAGAGGGCGTGGTGGTTCCAATTCTTGGTAATAGCGTGCCTTAGAATCCTGGCTCAGAACGAAGCGATCGATGTGGTAGTGCTGGCTTGATGGCACAGGAGATTCGCGTTCATTATATGCGCCCGGTCCCAGAGATATGGAAAATCGCACAGGAGATAGGACTCATCTACTTGGGTAGCGTCAGGGAATTTCTAGATAGAGTCACTCAGGATAGTTACAGACGGCTGCGATGGTATAGTTCACTGAAATATCTTCCGCCGACTCCAGCCTATGCGTCAACCCAACCGCCAGTGGGCAGACTCACACCGGTAGATTGACATGGTGCGGATTCTACTATTGGGCAATGAGGATCTCCGGCTCTTCTTTCGTGTCTGTTACACGGCGAAAGACCGAACATTCTGGTACGAGAACGCCGGACTACTACATTAACGGCGGGCTAGTTTTTCGTCTTAATGAGAGCTGCGGGACCGCGGCTCATACCTAGCCAACTTCTTGCACTATCAAACTGCGTAGATTGGCAGGAGTGTACAAAGCTGATATAGGCACTATTTAGGGTTCGCGAAATTTGACCGCTCTACGTCAGCTGATAGCAATGTGCTTGCCAGTGATGGGCCCTAAGGGTGCAATTACGCTACGGGCCAGTACTCTAGTAATTACAGAGTGATCAGTTCGTCGTGTGTACACCGACGAAAGGGAATTAATAGACTGCATGGGTGTACAGCCACACGGTACCTACCGATGATAACTGCAACCGTCAGCGTGTGGTGTCCGCTACGGCGACCGCCAGCTAATAATCGTACTCCTTCAGGTAGGTACCTAATTCGACTAGTTGGGAATTCACGCTTTGGGCACCCACGGACTTGATAGTACTTTGCTGTTGGGCGGCGACGTCGCAGTCGTGCGGGGTGCTATTAAACGGTTCCCCTTAATGGTCCGTCTCGGTAAATCTAAGTTTTGGGGGGACCATGCCTATGACTTTGCACTCAACCCCTTTGCCAGGTGTGGATGCGATGTTGGTTCATTTGACAGCTCCTAAGATCACACCATTCGAGAGGGACCAGTGTTCGTTAGAATTACACTGTCCATCTTGTACCATCCGCGAGTATGCAGGAGTAGAAAGCTTCCGGTCTGCTGTACGAGCGCGCGTTGTACGTAGACTTGTCAGGTCCCCTTGACGCTAGTCAAAGGAGTTAAAATAAGTTGGAACGCTCTTCCCGTGCAAGCTCCCCCACTGTCGGCTCGGTTTTTGGATAGAGTTGTTCGATCTACTGCCTAATCCACCATGAATATTCATAGTTACATACTAATCGCCGTGTGGGGGCGACCTTCAAGTATCGATTTCCAAGGTCGTACTACCAGTTAATTTCGGAGCTCTTCGGTATTGCTCAGGGGTCTCCGTGTGGACATAGAGCGCTGATTGGTCATTGTGGTCCGGGGTGGGATCGCGTAGGCGAGCTTGAACAACCGTTCCACTCTCACTACTGAAGTCTTTTAATCGCAAGAAGCCTCTCGACACCCGAGAATAAACTAGTTTCCGTTGTAATAGCCTCAAAACGGAACAGACTTTACGTGCCCGGAGACCGCCACCCAACTACCTGCCCGAATGAAGGTACGTGTTCACCGCTTAATAACGCATGCATGTAAAGACAGCGTGCCCGATGTCGATCTCTCGTATGTGTCCAGCAGTCCGTGCGTCCGAACTTGTAGGCGACTACGCAATATCTTTAGTAGCTGACGAGCGTACGGTGAGGCAGCAGTTCGCGTCAGCGTTTGCTTGCCGACCTTAACGCACGTCTCAATATCATACGGCGCCGGGAGCACATACATCAGGAAGTGGGGTAACCATACCGTTACTGGTCGGGTGAATAATCAGAGTTATCCACAGCACGGGATTCCCCGCTCGAGG";

    //_dna_q = getReverseComplementary(_dna_q);
    int32_t score = needleAlignment(_dna_q, _dna_d, SQ, SD, mismatchingPenalty,  _open_gap_penalty1, _extend_gap_penalty1, _open_gap_penalty2, _extend_gap_penalty2);
    std::string _alignment_q;
    std::string _alignment_d;
    while (!SQ.empty()) {
        _alignment_q += SQ.top();
        _alignment_d += SD.top();
        SQ.pop();
        SD.pop();
    }
    std::cout << _alignment_d << std::endl;
    std::cout << _alignment_q << std::endl;
    std::cout << score << std::endl;
    ASSERT_EQ(0, 0);
}


TEST(needleAlignment, c2){

    std::stack<char> SQ;
    std::stack<char> SD;
    int32_t matchingScore = 0;
    int32_t mismatchingPenalty = -3;
    int32_t _open_gap_penalty1 = -4;
    int32_t _extend_gap_penalty1 = -2;
    int32_t _open_gap_penalty2 = -80;
    int32_t _extend_gap_penalty2 = -1;

    std::string _dna_d = "CCTATGGCACAGCGGTTGGCGCTTGCGCGGTCACCGGCGACTGGTCGATTGGCTTGTTAAATGCGTATGGGACATATCTTAAGCAAAGTCATGAGTGTGCATGAGATAGTCGCAGTTCTTTGACACAGTATTAATTTCAATCCTAACTAAGACCAATAACATCCAGAAGGTCGTACTCAACAGCGGGTACGTTTGACGTGTGATCTAGTTTGGCTCCCGCCAGCATATAGATGGTAAAGCATGTCTAAGATCAGGCTCTTCCCTATGCCTGGCATATGGTCATCGCGTGATTGAGTCTCCAGGGTTCAATAACGACGCCTTTGATGTTTTATTGTACCGACTGAGGTTTTCACGACTGTAGAGAGTATAGGAACTATCTAGCCTCGCTGCTTAAACATTCGAGCGGATTGAAATATTGCGGATTCTTCCATTGGATTCAAAGCATCTCCCGAGCTTCATTCGTGTGTGGCAACAAGCGAAAGTCCGACCGTAAGTGAATGCCCTTGACGGACTTCGGTGTTAAGGGCTATGGACTTCTCGGTTTCGTATGGATCTGCGGAATTGCTGTAGATACATAGGGAGAGTGGGCAACGATCTCCCGCGGTAGAGTGGTATGTGTGACCGGTGAAGTTTTAGTCATCTATTATTCCTCCCGGCATCGAAGCGCTCAGCCACTGCTTATCACATGATCTGTCCCAGCGTTGGCGCCTTATCGGAAAATTACTCTCCGCGCCATGTCTTCAGTAGATACATAACGATTTGTATGACGGTTGGACCGTAACGTAATTGAGAGGGTTAGCGGCATGCTGTTGCGGATCTCAGTGAAGGGCTGTCTATATCTTGAACCCTAGAATACTGGTTACAGGAGCTCCGCGTTCCACCGAGTAATCCTAATTCGTCCCAGAGATATGTTCGAAAACTAGTCCGGCATGCCCGTGTATCTCAACAATGGATATGTCCTTGCATCGGTGGGCGCCGGTATTGGAGCAGTTATCCCGGCTACAATGGAGATTTAGAACTATATGCCTTTACAAGGCTAACCTCGACTTTAGTGTGCCCATCTCGAACAGTTTGCGGTGAATGGCTCTCACAGTTTCACTGGCCAAGTTGCCTAATAACGCAGCCCCTAGTTACAAAGAGACCACAATTGACCTGCATCAGTTCACATACCAGATTCGATTTTGTACCACCCGCGTTGGTGGAGTCGCCGAACGCCCGGAAACGGCTCCGCGCAGCAGCTTTTTCGGTAGCTCTGATAGACAGGCATGACGTTAGTTAGTTGAATTAAACCAAGGAGGAACGGCGTTGCGGGCCACGCCTTCAGACAGAAGGCTTGAATTTTGGACGCATTCAATCTAATATGAGCTCACTGTCACATCGACGAAGAGCTGGACAGCGTACTTGCCGATTTGGGAACAGATTACCGTACCGATGAAGGAAAGATCTGTGACCTATATTTCCGAATCTTTCCGCTATTTCTAAGTAAAAACCGTGAAGACAATGTTCCCGGGCCACTGGTACTGATCCCCGGGCCCAGCACGGAGGTCAGCTCAAGGGTCCGTTCTTGGTTTGCTACAGTCGCTTTTTTATCGCACCTCGCCCATGGACACTTGTGAATGTACTCTATTCCGTCTGAGTTTCGTCTAATGCTCCTACCCATTACGTGCTATGACGGCGGCAGCTAATAAGGTTCATGAATATCGGTCAAAGAGGACTGCTTAATAACAGGAGACTTTAACCCTAGAGTGTCAGATAAAAGACTCTCGAAGCTGCGTAACAATCTGTGACCCGGCACGGTTAGTCAACACCCTTGTCAACATAAGCGGCAGCACACGCGAAGTTAGGAAGCAGACCGCTGATTCGTATGCTAGTCTTCCAAGACGTAGGTTTCACCTTCATGGGACCCGGACCCGGGTTAGATTACTAAATCGGGTATCAGTAGCTGTAAGTGAATTAGGAGTACTCTGACCTATACGCAGAGCGTGAGTCCCCACTGCCCG";
    std::string _dna_q = "AGTATCCCGACGCGGTTACTGCTTAAGCGGCTAACGTCCGCCGTTCCATGGGCTTCCTAGATTCCAAGGGATCTTGCGCTCTCATGAGGCATTTGAGAGGGCGTGGTGGTTCCAATTCTTGGTAATAGCGTGCCTTAGAATCCTGGCTCAGAACGAAGCGATCGATGTGGTAGTGCTGGCTTGATGGCACAGGAGATTCGCGTTCATTATATGCGCCCGGTCCCAGAGATATGGAAAATCGCACAGGAGATAGGACTCATCTACTTGGGTAGCGTCAGGGAATTTCTAGATAGAGTCACTCAGGATAGTTACAGACGGCTGCGATGGTATAGTTCACTGAAATATCTTCCGCCGACTCCAGCCTATGCGTCAACCCAACCGCCAGTGGGCAGACTCACACCGGTAGATTGACATGGTGCGGATTCTACTATTGGGCAATGAGGATCTCCGGCTCTTCTTTCGTGTCTGTTACACGGCGAAAGACCGAACATTCTGGTACGAGAACGCCGGACTACTACATTAACGGCGGGCTAGTTTTTCGTCTTAATGAGAGCTGCGGGACCGCGGCTCATACCTAGCCAACTTCTTGCACTATCAAACTGCGTAGATTGGCAGGAGTGTACAAAGCTGATATAGGCACTATTTAGGGTTCGCGAAATTTGACCGCTCTACGTCAGCTGATAGCAATGTGCTTGCCAGTGATGGGCCCTAAGGGTGCAATTACGCTACGGGCCAGTACTCTAGTAATTACAGAGTGATCAGTTCGTCGTGTGTACACCGACGAAAGGGAATTAATAGACTGCATGGGTGTACAGCCACACGGTACCTACCGATGATAACTGCAACCGTCAGCGTGTGGTGTCCGCTACGGCGACCGCCAGCTAATAATCGTACTCCTTCAGGTAGGTACCTAATTCGACTAGTTGGGAATTCACGCTTTGGGCACCCACGGACTTGATAGTACTTTGCTGTTGGGCGGCGACGTCGCAGTCGTGCGGGGTGCTATTAAACGGTTCCCCTTAATGGTCCGTCTCGGTAAATCTAAGTTTTGGGGGGACCATGCCTATGACTTTGCACTCAACCCCTTTGCCAGGTGTGGATGCGATGTTGGTTCATTTGACAGCTCCTAAGATCACACCATTCGAGAGGGACCAGTGTTCGTTAGAATTACACTGTCCATCTTGTACCATCCGCGAGTATGCAGGAGTAGAAAGCTTCCGGTCTGCTGTACGAGCGCGCGTTGTACGTAGACTTGTCAGGTCCCCTTGACGCTAGTCAAAGGAGTTAAAATAAGTTGGAACGCTCTTCCCGTGCAAGCTCCCCCACTGTCGGCTCGGTTTTTGGATAGAGTTGTTCGATCTACTGCCTAATCCACCATGAATATTCATAGTTACATACTAATCGCCGTGTGGGGGCGACCTTCAAGTATCGATTTCCAAGGTCGTACTACCAGTTAATTTCGGAGCTCTTCGGTATTGCTCAGGGGTCTCCGTGTGGACATAGAGCGCTGATTGGTCATTGTGGTCCGGGGTGGGATCGCGTAGGCGAGCTTGAACAACCGTTCCACTCTCACTACTGAAGTCTTTTAATCGCAAGAAGCCTCTCGACACCCGAGAATAAACTAGTTTCCGTTGTAATAGCCTCAAAACGGAACAGACTTTACGTGCCCGGAGACCGCCACCCAACTACCTGCCCGAATGAAGGTACGTGTTCACCGCTTAATAACGCATGCATGTAAAGACAGCGTGCCCGATGTCGATCTCTCGTATGTGTCCAGCAGTCCGTGCGTCCGAACTTGTAGGCGACTACGCAATATCTTTAGTAGCTGACGAGCGTACGGTGAGGCAGCAGTTCGCGTCAGCGTTTGCTTGCCGACCTTAACGCACGTCTCAATATCATACGGCGCCGGGAGCACATACATCAGGAAGTGGGGTAACCATACCGTTACTGGTCGGGTGAATAATCAGAGTTATCCACAGCACGGGATTCCCCGCTCGAGG";

    //_dna_q = getReverseComplementary(_dna_q);
    int32_t score = needleAlignment(_dna_q, _dna_d, SQ, SD, mismatchingPenalty,  _open_gap_penalty1, _extend_gap_penalty1, _open_gap_penalty2, _extend_gap_penalty2);
    std::string _alignment_q;
    std::string _alignment_d;
    while (!SQ.empty()) {
        _alignment_q += SQ.top();
        _alignment_d += SD.top();
        SQ.pop();
        SD.pop();
    }
    std::cout << _alignment_d << std::endl;
    std::cout << _alignment_q << std::endl;
    std::cout << score << std::endl;
    ASSERT_EQ(0, 0);
}

TEST(alignSlidingWindow, c1){

    std::stack<char> SQ;
    std::stack<char> SD;
    int32_t matchingScore = 0;
    int32_t mismatchingPenalty = -2;
    int32_t _open_gap_penalty1 = -4;
    int32_t _extend_gap_penalty1 = -2;
    int32_t _open_gap_penalty2 = -81;
    int32_t _extend_gap_penalty2 = -1;

    std::string refSeq = "";
    std::string querySeq = "";
    int n = 200;
    for(int i = 0; i < n; i++) {
        refSeq = refSeq + "AACCTTTTTT";
        querySeq = querySeq + "AACCATTTTT";
    }
    std::string _alignment_q;
    std::string _alignment_d;

    int64_t _length_of_q = querySeq.size();
    int64_t _length_of_d = refSeq.size();
    int64_t slidingWindowSize = 800;
    int32_t score =  alignSlidingWindow( querySeq, refSeq, _length_of_q, _length_of_d, _alignment_q, _alignment_d, slidingWindowSize, matchingScore, mismatchingPenalty, _open_gap_penalty1, _extend_gap_penalty1, _open_gap_penalty2, _extend_gap_penalty2);
    std::cout << _alignment_d << std::endl;
    std::cout << _alignment_q << std::endl;
    std::cout << score << std::endl;

    score = alignSlidingWindow_minimap2( querySeq, refSeq, _length_of_q, _length_of_d,
                                         _alignment_q, _alignment_d, slidingWindowSize,
                                         mismatchingPenalty, _open_gap_penalty1, _extend_gap_penalty1, _open_gap_penalty2, _extend_gap_penalty2);
    std::cout << _alignment_d << std::endl;
    std::cout << _alignment_q << std::endl;
    std::cout << score << std::endl;
    ASSERT_EQ(0, 0);
}


TEST(alignSlidingWindow, c2) {

    std::stack<char> SQ;
    std::stack<char> SD;
    int32_t matchingScore = 0;
    int32_t mismatchingPenalty = -3;
    int32_t open_gap_penalty1 = -4;
    int32_t extend_gap_penalty1 = -2;
    int32_t open_gap_penalty2 = -81;
    int32_t extend_gap_penalty2 = -1;
//    std::string refSeq = "AC";
//    std::string querySeq = "TAAGCCGTATATTCACTGCATTGTATGGGGAGCAAGTTCGCATGTTTGGTCAGCCGGATTTTCTGAATTTCTGTCCATACTTCGTTATTATTTTTTTTATGTTGCTGCATTTCGACAAGAAAGAGATAAGGGTATGGGTTTCCCATGTGAACTTTGTCACAAAGGAACGTCTCTTTCATAAATTGGTGTTTCGTCACATTGTCGAGACTCGAGAGATATTGACGTTTTGTAAGATTCTCGAGAGCCATGACCTATTGTCAAATCTATGAAAAAAAACTGTTTTTCTTCTCCTAACATAAATACTATATATACAATTTTATATCTGGTCAAAATGAAACAAATCTGAATTTGACTAAGTCTCAATAAACATATTTCATGATAAATTTAAACATATTTTTTTATACAAAAAATGTTCAAACCTCAAATCATTTAACTTACCACTATCTTAGGCCTGTTTAGTTTCCCACCCAAAATTTTTTTATCTATCCCATCAAATCTTTGGACACATGTATGTAACATTATATATATATATATATATAAACTAATTACACAGTTTGGTTGAAAATCACGAGACGAATCTTTTAAGCCTAGTTAATCCATTATTAACCTTAAGTGCTACAGTAACCCACATGTGCTAATGACATATTAATTATACTTAGGGTCTGTCTAGCTATCTGCTGACAGATTTTTGTTGTCAAAATCTGTCAAATTTTTATCCAATCAACAGATGACAGCTCATCCAAAAAAATCTGACGGATAGAACATTGAAATATCTGTCAACTAAAACATAAATAGATCATCCCATAACGGCTTCCCAAATCCAACATCCATTAACAGCAAAAACAAAACGCACTCTTTTGATTTATGGTACACCCGTAGCTGGCTCACTATACACGTCTCACTGTCGTCACTGCTCACTTCTTGTTCTTGCTCTCTAGCAGCCGCTTCGGCTCAATGTCGCAGTTCACTTGTTGTTCTTGCTCTCCAGTAGCCGCTTCAGCTCGATGAAGATCAAGACCACAATCTGGATCAGGTTCTTCTTCGCGACCTAGGTCACCACCCTCCCTCTGGCCACCAAGAGCACGCTGGTCGTTCCTCTGCCCTCGCCACCTTCCTCATCCATCTCAGAATTCTCTAACAACATGTTGTGGTGGATGCACATCTCCTTGCAAGCCGGTATCTGCAGAGCATCCTATTGACAAAAAAACTAAATCATCACAACTATGGAAAAATAGCAGCTATGAAAGCCATTTAGCTCTCCAAAATCATTTAACACACTAAGCATGTAACATAATAAGCATGAATAAAAAACTCTGGCTGCATGTGCACATTGCAGGTTGACAATCAGACTATAAACACTAATCGAGATGTGTTAAGGCCCTGTTTTGTTGGTGTTGTGAACCGTCACATCGAGTGTTTGTTTGGACACATGCATAGAGTACTAAATATAGACTATTTACGAAACTAAAAATACAGCTAAAGAATAATTTGCATGACGAATCTTTTGAAACTAATAGTCTATGATTGGACACTAATTACCAAATAAAACAAAAATGCTACAATACCTGTTAAACTTTAACACCCCCACCCAAACACCCCTTTAATGGTCATACCTACTATCTAGGTATTAGATATCCAAGTCTTAGTTCATAATGACAAGAAACCATCTGGGTTCTAAAAGATATTGATCCCCACCTAGAGTACAGCCCTTCCACCAGCATCATCAACACTGAGAAAGCCATATATCGCAAACAGCTATATCATCAACACTGAGAAACAGTTTGAGTTGTTTTACGGAATTCCAAAAAGGACAGGTCTTCTGTCTGAACTTCCCTAAGACTAGAGTCGTTGTAGACACCATGTCCAGTGCAATCGTTTAGAACATATATAGCTTCAATAAAACTATTATATACAAGGAGTGGCGCTTTAGCTGCAAAAATGTAAGCAAATGTTAATCAGTGACTTGATACGTGTTAGTTAGTGGCTTCAAAAACAAAAGTTTAGTTCAAAAACAAATACCTTTTTAGATGTTTTCAAAAAGATAGTCAGCCAAATGCCTTATCTTCTCAGACTCATCAACTAAAGATGGCAGAAACCAAAGGAAGAGAACCCCTCTCCATTTTACATAGTCCCTGTGGACAAAAAAAGCAGTCTCATTAACCATGACCCAATATTCAAAATAAAGCATTATAGAAGTGATTAGCACCTGCAGCAACTTAGAGAGTAGGATAAAAACATTTGTCTCCGTACTACTTCACAGGGATCACGTAGTGCTTTTGTTATTTTTGACATATAACTGCAGAAACGTCACACACACAAAAACAAGTTAAGCAACTCAACTAAATTCACCAAGAAAAAACAAAGGTCAAACTCAAACATAAAAACAATAATGCAAATCAACACAACACACATAGAAGTCATCAGCTGCCCGAACCTCGGAGTGCAGCAGCTCCAACAGCAGAAAAAAAAGCAGCAGCAGCAGCTCCAACAGCAGCTCAAAACCAACCTAGAGAAAACTAAAAACAAAGATACACAGTCACACTTACACATAGACCCCCAAAGCTAGCATACAAATACACAAACAACTATAAACTAACAAGAAAAAAAGCCTACAAAAACACACACACAGAGATACTCACACACAAACAAGAAAAAAAGAAAAAGACCCACAAAACACCCACAAACAGCACAAACACACCTAAAGACACACACAGACAAACACACACACACACACAAATATAGCTGCACAAACACACGTAAAGAAACACATGCACACACGGAGACACACACACACACACAAAGACCAACAGAGCCAAAAAACACATGCATCCACAAAAACAAAAACATTCACAAACACAGACACACTTACACTTTCTTATAGACCCACACAACACAAAACTAGCACCCACACAACCTGTTACCCACAAAGAGACATACTCACACTCACACACACACACACCAAACAAACAAAAAAAAGGAAAAAAATGAAAAAGAAAAAAAAAGAAAGGAAAACATAGTGCCCATGTAAACCATAAACAACCACTTAATGATTCTTTGTTAGTAGATATACATAACTATATAGCAGCGACAATGTGACTGATTTACACAGACAAGATAGAAAAATGTAAAGGATGATGCTAATTTGTACCATGAATCTAAGATAGTTGCACTACCATGGCCAAATAATTCTTTTACTCGCTTAGTTGTTTTAAATATGTGGTTGGAACATGGATCTATATAATGCAGTACAATGATGAATATTTTTTATTTGTAAGCATAGTTCCATGGATTGATAATGCAGTCAAGTGACGAATATTTGTTCTTTGTAAAATACGAGAAGTCACAATTTCCACATATGAACTTATCTTTAAAAACAAAGACATGTCCCATAAGCTCATTTATAGGTGTTAAATAATAAAGGAAGCAGCAGAGTACTCTGCTAGTATGTAAGCCTAAGTGCCTAACATAGACTTCTAGAGAGCACTGGTAAAATCTTGTTCTTAGAGCTTTGTTTGATCACAGCCACAATAAATACTTTCAAGCAGAAAATGATATTCATATGAAATACTGATTGTAGAGTAGACAAAATTACCTTCACCAGAACCTTTGATTTCCTCATGATCTTCACCACCTGACCAACATATGAGCCAGGCTCTTGAAGCAACTGCAACTCTTCCCGGAACATTCTAACTGAAAAATCAAAATTGCAAAGCCAAAATTAGAGTATGGTAATCAGAAAACAATAAATGTAGGAGGATGTCCTGCTCCTGAAACAGAGACAGCGGGAATATAATAAATCCTAAACAAAAGCATCATGGTGCAATCATGCAAGTGAATATTACTCCACTAGGTAATGGGCGCATGGTGATCATCAAAGATAATTTCACATGGCAAATTTTCAACTAGAGCCGAATTTAGTTTATGATTTATGTTAGAATGTCACACAATAGGCAGCCACAATACCACAATCATGTCAAAGAAACACAAGAATTGAATAATGATAGATAACCTCAGAAATACATAAACCTGCTTGAAATATTATCCTAACAACCCGACAAAAATGTGGTAGAACAAAATCGAAAAGACAACATAAGCAAACACAGACAAGCAACAACCTAAGCTAGAGCGGCGTGTAGCACGTATACGCAGAGGGAGGCACGCGCCCGCCGGCAAGCCCACTTGGCCTGCGCACACGCCAGCACCTGCCGTCCATGCCTGCCTGTGCACATAGCTGATGCACACACACCCCAGCCCCGCCGCAACTAGATCCACAGCTACAACCCCTGCCGCGACCAAATCAAAAGCCACAGCCACTACTGGGTTTGAAACAACTACCATAGCCACCGCTGAACCAAACACACACACCCACACACAGGTGACGGACAGAGCGAGAGGGCTTGCCGCCGCGTTGCTGCCTCCGGCCCCAGCGCCCGCGCCCGCGCCCTATGGTCGGCTGGCCGCCCCGGTGCACCAACTCCCTACCGCACTGCCGCCCCTCGTCAGCGCATCCGGCTCTGGCCACCACGTCGCCCAACCTCACCCCGCGGCTCGCCCCTCGCCCACCAACACGCACTAGCTCCTCAACACAAAAGCAAAATCAACAAACAAACATACAAAGAAGAAATACACTTACAAAAATCGATGGGGCATGGGCTCTAGTGCGGTCGTCGGCATGGGGGAAGCGGTCCGGAGATCTCAAACCACCGCAGGCCGCGGGCACAGCGGAAAGCGGCGCGCGAGGCTTAGCCATGCCCACCCCACAGCTCGCCGCAGCTTAGCGGACTGCCGCCGGTGGCTCCGCCCCACCCACGGTCTGGCGCGGCGCAAAGCGAAAGCGGCGGCGAGGCCACCACCCGTGACTCTCACGAAGCGGAGAAATATTGGGGAAGAAAGAAGCGGTCAAAGGAAAGAATAACAGGTTATCGGGTTTCGGAAGATCTAGTTCGCGGACCCATCAGCGTGGCGGACCCGTCAGTAAACCTAGATTGCTGCACGAATCTCTAAACACAACAAACGGCCTAGAATCTGACAAATAAAAGATAACAAAATCTGTCAACAGATAAATAGCAAAACTCTTATACTTAATAGATTTGTCTTGCAGTTTCTAGATGAGCTATGTAATTTGTTCGAGAACATTTATCTATACTGAGAGAATACCATCATTAGAGCTTGAAATACATCCTATAAAATACGAGTATTCATACCAAATAGATATATTATGTATCCTGATTATTAATACTAGTAATATTTATAGTTTTTACAAATTTTGTCAAATTTGACTTAAGACTATGTTAAATTGCACTTTTTCGAGTACTCTACTCCCTTTCTTCTAAACTGTATATTCTTCTGAATGTTTTAGGTAACTATTTTTTGCTAAATATGTATTATGTTTAGACAGTAAAAACCATATCTTTAAAAAATATCAAACTGTTTACAACGAACAGAGGAAGTAGTACACACTGTTCAAGACATTTAGTTCGATGTTCATTCTTTGCACATGGGTGTGTGCATGTTTTGGCCAACCGTGTTTTCTGAATCTCGGTGGTCTAAACTCCAAAAGGTCTTAAAAGTATACTTCATACCTTCCAAATTTAAACTGTTTTTGATATTTCCTAAATACATAGTTTTTATTATGTATATAGACATAATGTAAATTATAGTAGATCTAGAAGAGTCAAAACGTTTTATAATTTAAAACAGAGGGAACTGAAGAATTTTGAAACTTGCTGCATTGAGTGAAGGGGATGTTTTCAGACAGCTCTATCGAAACAGAGAAGGTAATATTGTCTCCTACAGAACGTATGATATTTGGTAAAGTTCTCGAAAGAAGTCGGTCGGTCCATTTGCAATCGAGTCGAATAGGGATGCCCTTCCAATCCATATCCACGCCGCTATATTTTATACCTTATCGATAAAAGATGCATACAGAAAAATGTCTAAACGTCTGACGTCCCACCTTTCTGCCTTACCTTTTACTCCATATATAATATCTTATCTTATCTTGAAGACTAAATCATGCAATTTTTCATCATTTTAAAAATAAGTCCAGATAACAAATACTATATAAATTTAGATTTTTGCTTTACCATTTAGTACTGATTAATTTTTTTTGGGAGTTCCGATCTGAATATTATTACAAACACCAACCTTCATCCCTTCCTACTTTTCTAATTATTGGTAACGTTTCTACTAATTAACGGTTCAAATTGTAACTATTGCATTTCTTAATAATTCGCAGAACCATCTCTCCCCCTTTAAATAATTCCTCAATATTTCTTTCTTATTACACTCATGCAAATCCATTATCTATTGCACCCACCGGTCAAAAACACATATGACGTTTTGGATGTGACATGGTGTCCAATGTGTATTTAGTACCACTATTCTCTTTGATAGTATATCATAGTTGGTTCAGAAAAATTAACATCTTGTTTATGTTTTAGGAT";
    std::string refSeq = "";
    std::string querySeq = "";
    int n = 100;
    for(int i = 0; i < n; i++) {
        refSeq = refSeq + "AACCTTTTTT";
        querySeq = querySeq + "CCTTCCTT";
    }
//    refSeq = std::string(5000, 'T') + std::string(5000, 'A');
//    querySeq = std::string(5000, 'A') + std::string(5000, 'T');
    std::string _alignment_q;
    std::string _alignment_d;

    //with this paramters minimap2 cost 30GB RAM

    //int64_t slidingWindowSize = 20000; //NW cost 12GB
    //int64_t slidingWindowSize = 30000; //NW cost 26GB
    //int64_t slidingWindowSize = 40000; //NW cost 48GB
    //WFA 36000*36000 cost 36000*36000*20 = 25 GB
    // 20000*3*20000*3*20/1000/1000/1000  20KB might cost 72GB RAM
    // 30000*2*30000*2*20/1000/1000/1000  30KB might cost 72GB RAM
    int64_t slidingWindowSize = 500;

    int32_t wfaSize = 20;
    int32_t min_wavefront_length = 10000;
    int32_t max_distance_threshold = 10000;
    Scorei m(matchingScore, mismatchingPenalty);
    for (int i=0; i<200; i++) {
        std::cout << "line 325" << std::endl;
        int64_t thiScore = alignSlidingWindow(querySeq, refSeq, _alignment_q, _alignment_d,
                                              slidingWindowSize, wfaSize, matchingScore, mismatchingPenalty,
                                              open_gap_penalty1, extend_gap_penalty1, open_gap_penalty2,
                                              extend_gap_penalty2, min_wavefront_length, max_distance_threshold, m);
        std::cout << _alignment_d << std::endl;
        std::cout << _alignment_q << std::endl;
        std::cout << thiScore << std::endl;
    }
    ASSERT_EQ(0, 0);
}

TEST(MSA, c1) {

    std::stack<char> SQ;
    std::stack<char> SD;
    int32_t matchingScore = 0;
    int32_t mismatchingPenalty = -4;
    int32_t open_gap_penalty1 = -4;
    int32_t extend_gap_penalty1 = -2;
    int32_t open_gap_penalty2 = -80;
    int32_t extend_gap_penalty2 = -1;

    std::string _dna_ref1 = "AGTATCCCGACGCGGTTACTGCTTAAGCGGCTAACGTCCGCCGTTCCATGGGCTTCCTAGATTCCAAGGGATCTTGCGCTCTCATGAGGCATTTGGGCGTGGTGGTTCCAATTCTTGGTAATAGCGTGCCTTAGAATCCTGGCTCAGAACGAAGCGATCGATGTGGTAGTGCTGGCTTGATGGCACCAGAGATATGGAAAATCGCACAGGAGATAGGACTCATCTACTTGGGTAGCGTCAGGGAATTTCTAGATAGAGCACTCAGGATAGTTACAGACGGCTGCGATGGTATAGTTCACTGAAATATCTTCCGCCGACTCCAGCCTATGCGTCAACCCAACCGCCAGTGGGCAGACTCACACCGGTAGATTGACATGGTGCGGATTCTACTATTGGGCAATGAGGATCTCCGGCTCTTCTTTCGTGTCTGTTACACGGCGAAAGACCGAACATTCTGGTACGAGAACGCCGGACTACTACATTAACGGCGGGCTAGTTTTTCGTCTTAATGAGAGCTGCGGGACCGCGGCTCATACCTAGCCAACTTCTTGCACTATCAAACTGCGTAGATTGGCAGGAGTGTACAAAGCTGATATAGGCACTATTTAGGGTTCGCGAAATTTGACCGCTCTACGTCAGCTGATAGCAATGTGCTTGCCAGTGATGGGCCCTAAGGGTGCAATTACGCTACGGGCCAGTACTCTAGTAATTACAGAGTGATCAGTTCGTCGTGTGTACACCGACGAAAGGGAATTAATAGACTGCATGGGTGTACAGCCACACGGTACCTACCGATGATAACTGCAACCGTCAGCGTGTGGTGTCCGCTACGGCGACCGCCAGCTAATAATCGTACTCCTTCAGGTAGGTACCTAATTCGACTAGTTGGGAATTCACGCTTTGGGCACCCACGGACTTGATAGTACTTTGCTGTTGGGCGGCGACGTCGCAGTCGTGCGGGGTGCTATTAAACGGTTCCCCTTAATGGTCCGTCTCGGTAAATCTAAGTTTTGGGGGGACCATGCCTATGACTTTGCACTCAACCCCTTTGCCAGGTGTGGATGCGATGTTGGTTCATTTGACAGCTCCTAAGATCACACCATTCGAGAGGGACCAGTGTTCGTTAGAATTACACTGTCCATCTTGTACCATCCGCGAGTATGCAGGAGTAGAAAGCTTCCGGTCTGCTGTACGAGCGCGCGTTGTACGTAGACTTGTCAGGTCCCCTTGACGCTAGTCAAAGGAGTTAAAATAAGTTGGAACGCTCTTCCCGTGCAAGCTCCCCCACTGTCGGCTCGGTTTTTGGATAGAGTTGTTCGATCTACTGCCTAATCCACCATGAATATTCATAGTTACATACTAATCGCCGTGTGGGGGCGACCTTCAAGTATCGATTTCCAAGGTCGTACTACCAGTTAATTTCGGAGCTCTTCGGTATTGCTCAGGGGTCTCCGTGTGGACATAGAGCGCTGATTGGTCATTGTGGTCCGGGGTGGGATCGCGTAGGCGAGCTTGAACAACCGTTCCACTCTCACTACTGAAGTCTTTTAATCGCAAGAAGCCTCTCGACACCCGAGAATAAACTAGTTTCCGTTGTAATAGCCTCAAAACGGAACAGACTTTACGTGCCCGGAGACCGCCACCCAACTACCTGCCCGAATGAAGGTACGTGTTCACCGCTTAATAACGCATGCATGTAAAGACAGCGTGCCCGATGTCGATCTCTCGTATGTGTCCAGCAGTCCGTGCGTCCGAACTTGTAGGCGACTACGCAATATCTTTAGTAGCTGACGAGCGTACGGTGAGGCAGCAGTTCGCGTCAGCGTTTGCTTGCCGACCTATCATACGGCGCCGGGAGCACATACATCAGGAAGTGGGGTAACCATACCGTTACTGGTCGGGTGAATAATCAGAGTTATCCACAGCACGGGATTCCCCGCTCGAGG";
    std::string _dna_ref2 = "AGTATCCCGACGCGGTTACTGCTTAAGCGGCTAACGTCCGCCGTTCCATGGGCTTCCTAGATTCCAAGGGATCTTGCGCTCTCATGAGGCATTTGGGCGTGGTGGTTCCAATTCTTGGTAATAGCGTGCCTTAGAATCCTGGCTCAGAACGAAGCGATCGATGTGGTAGTGCTGGCTTGATGGCACAGGAGATTCGCGTTCATTATATGCGCCCGGTCCCAGAGATATGGAAAATCGCACAGGAGATAGGACTCATCTACTTGGGTAGCGTCAGGGAATTTCTAGATAGAGTCACTCAGGATAGTTACAGACGGCTGCGATGGTATAGTTCACTGAAATATCTTCCGCCGACTCCAGCCTATGCGTCAACCCAACCGCCAGTGGGCAGACTCACACCGGTAGATTGACATGGTGCGGATTCTACTATTGGGCAATGAGGATCTCCGGCTCTTCTTTCGTGTCTGTTACACGGCGAAAGACCGAACATTCTGGTACGAGAACGCCGGACTACTACATTAACGGCGGGCTAGTTTTTCGTCTTAATGAGAGCTGCGGGACCGCGGCTCATACCTAGCCAACTTCTTGCACTATCAAACTGCGTAGATTGGCAGGAGTGTACAAAGCTGATATAGGCACTATTTAGGGTTCGCGAAATTTGACCGCTCTACGTCAGCTGATAGCAATGTGCTTGCCAGTGATGGGCCCTAAGGGTGCAATTACGCTACGGGCCAGTACTCTAGTAATTACAGAGTGATCAGTTCGTCGTGTGTACACCGACGAAAGGGAATTAATAGACTGCATGGGTGTACAGCCACACGGTACCTACCGATGATAACTGCAACCGTCAGCGTGTGGTGTCCGCTACGGCGACCGCCAGCTAATAATCGTACTCCTTCAGGTAGGTACCTAATTCGACTAGTTGGGAATTCACGCTTTGGGCACCCACGGACTTGATAGTACTTTGCTGTTGGGCGGCGACGTCGCAGTCGTGCGGGGTGCTATTAAACGGTTCCCCTTAATGGTCCGTCTCGGTAAATCTAAGTTTTGGGGGGACCATGCCTATGACTTTGCACTCAACCCCTTTGCCAGGTGTGGATGCGATGTTGGTTCATTTGACAGCTCCTAAGATCACACCATTCGAGAGGGACCAGTGTTCGTTAGAATTACACTGTCCATCTTGTACCATCCGCGAGTATGCAGGAGTAGAAAGCTTCCGGTCTGCTGTACGAGCGCGCGTTGTACGTAGACTTGTCAGGTCCCCTTGACGCTAGTCAAAGGAGTTAAAATAAGTTGGAACGCTCTTCCCGTGCAAGCTCCCCCACTGTCGGCTCGGTTTTTGGATAGAGTTGTTCGATCTACTGCCTAATCCACCATGAATATTCATAGTTACATACTAATCGCCGTGTGGGGGCGACCTTCAAGTATCGATTTCCAAGGTCGTACTACCAGTTAATTTCGGAGCTCTTCGGTATTGCTCAGGGGTCTCCGTGTGGACATAGAGCGCTGATTGGTCATTGTGGTCCGGGGTGGGATCGCGTAGGCGAGCTTGAACAACCGTTCCACTCTCACTACTGAAGTCTTTTAATCGCAAGAAGCCTCTCGACACCCGAGAATAAACTAGTTTCCGTTGTAATAGCCTCAAAACGGAACAGACTTTACGTGCCCGGAGACCGCCACCCAACTACCTGCCCGAATGAAGGTACGTGTTCACCGCTTAATAACGCATGCATGTAAAGACAGCGTGCCCGATGTCGATCTCTCGTATGTGTCCAGCAGTCCGTGCGTCCGAACTTGTAGGCGACTACGCAATATCTTTAGTAGCTGACCTCGGAGCGTACGGTGAGGCAGCAGTTCGCGTCAGCGTTTGCTTGCCGACCTTAACGCACGTCTCAATATCATACGGCGCCGGGAGCACATACATCAGGAAGTGGGGTAACCATACCGTTACTGGTCGGGTGAATAATCAGAGTTATCCACAGCACGGGATTCCCCGCTCGAGG";
    std::string _dna_query = "AGTATCCCGACGCGGTTACTGCTTAAGCGGCTAACGTCCGCCGTTCCATGGGCTTCCTAGATTCCAAGGGATCTTGCGCTCTCATGAGGCATTTGAGAGGGCGTGGTGGTTCCAATTCTTGGTAATAGCGTGCCTTAGAATCCTGGCTCAGAACGAAGCGATCGATGTGGTAGTGCTGGCTTGATGGCACAGGAGATTCGCGATTATATGCGCCCGGTCCCAGTATGGAAAATCGCACAGGAGATAGGACTCATCTACTTGGGTAGCGTCAGGGAATTTCTAGATAGAGTCACTCAGGATAGTTACAGACGGCTGCGATGGTATAGTTCACTGAAATATCTTCCGCCGACTCCAGCCTATGCGTCAACCCAACCGCCAGTGGGCAGACTCACACCGGTAGATTGACATGGTGCGGATTCTACTATTGGGCAATGAGGATCTCCGGCTCTTCTTTCGTGTCTGTTACACGGCGAAAGACCGAACATTCTGGTACGAGAACGCCGGACTACTACATTAACGGCGGGCTAGTTTTTCGTCTTAATGAGAGCTGCGGGACCGCGGCTCATACCTAGCCAACTTCTTGCACTATCAAACTGCGTAGATTGGCAGGAGTGTACAAAGCTGATATAGGCACTATTTAGGGTTCGCGAAATTTGACCGCTCTACGTCAGCTGATAGCAATGTGCTTGCCAGTGATGGGCCCTAAGGGTGCAATTACGCTACGGGCCAGTACTCTAGTAATTACAGAGTGATCAGTTCGTCGTGTGTACACCGACGAAAGGGAATTAATAGACTGCATGGGTGTACAGCCACACGGTACCTACCGATGATAACTGCAACCGTCAGCGTGTGGTGTCCGCTACGGCGACCGCCAGCTAATAATCGTACTCCTTCAGGTAGGTACCTAATTCGACTAGTTGGGAATTCACGCTTTGGGCACCCACGGACTTGATAGTACTTTGCTGTTGGGCGGCGACGTCGCAGTCGTGCGGGGTGCTATTAAACGGTTCCCCTTAATGGTCCGTCTCGGTAAATCTAAGTTTTGGGGGGACCATGCCTATGACTTTGCACTCAACCCCTTTGCCAGGTGTGGATGCGATGTTGGTTCATTTGACAGCTCCTAAGATCACACCATTCGAGAGGGACCAGTGTTCGTTAGAATTACACTGTCCATCTTGTACCATCCGCGAGTATGCAGGAGTAGAAAGCTTCCGGTCTGCTGTACGAGCGCGCGTTGTACGTAGACTTGTCAGGTCCCCTTGACGCTAGTCAAAGGAGTTAAAATAAGTTGGAACGCTCTTCCCGTGCAAGCTCCCCCACTGTCGGCTCGGTTTTTGGATAGAGTTGTTCGATCTACTGCCTAATCCACCATGAATATTCATAGTTACATACTAATCGCCGTGTGGGGGCGACCTTCAAGTATCGATTTCCAAGGTCGTACTACCAGTTAATTTCGGAGCTCTTCGGTATTGCTCAGGGGTCTCCGTGTGGACATAGAGCGCTGATTGGTCATTGTGGTCCGGGGTGGGATCGCGTAGGCGAGCTTGAACAACCGTTCCACTCTCACTACTGAAGTCTTTTAATCGCAAGAAGCCTCTCGACACCCGAGAATAAACTAGTTTCCGTTGTAATAGCCTCAAAACGGAACAGACTTTACGTGCCCGGAGACCGCCACCCAACTACCTGCCCGAATGAAGGTACGTGTTCACCGCTTAATAACGCATGCATGTAAAGACAGCGTGCCCGATGTCGATCTCTCGTATGTGTCCAGCAGTCCGTGCGTCCGAACTTGTAGGCGACTACGCAATATCTTTAGTAGCTGACGAGCGTACGGTGAGGTCGCGTCAGCGTTTGCTTGCCGACCTTAACGCACGTCTCAATATCATACGGCGCCGGGAGCACATACATCAGGAAGTGGGGTAACCATACCGTTACTGGTCGGGTGAATAATCAGAGTTATCCACAGCACGGGATTCCCCGCTCGAGG";

    std::string _alignment_query;
    std::string _alignment_ref2;
    std::string _alignment_ref1;
    int64_t slidingWindowSize = 500;

    int32_t wfaSize = 250000;
    int32_t min_wavefront_length = 10000;
    int32_t max_distance_threshold = 10000;
    Scorei m(matchingScore, mismatchingPenalty);
    std::cout << "line 438" << std::endl;
    int64_t thiScore = alignSlidingWindow(_dna_query, _dna_ref2, _alignment_query, _alignment_ref2,
                                          slidingWindowSize, wfaSize, matchingScore, mismatchingPenalty,
                                          open_gap_penalty1, extend_gap_penalty1, open_gap_penalty2,
                                          extend_gap_penalty2, min_wavefront_length, max_distance_threshold, m);
    std::cout << "line 443\t" << thiScore << std::endl;
    std::cout << _alignment_ref2 << std::endl;
    std::cout << _alignment_query << std::endl;
    thiScore = alignSlidingWindow(_alignment_ref2, _alignment_query, _dna_ref1, _alignment_ref1, slidingWindowSize, matchingScore, mismatchingPenalty,
                                          open_gap_penalty1, extend_gap_penalty1, open_gap_penalty2,
                                          extend_gap_penalty2);
    std::cout << _alignment_ref1 << std::endl;
    std::cout << _alignment_ref2 << std::endl;
    std::cout << _alignment_query << std::endl;
    std::cout << thiScore << std::endl;
    ASSERT_EQ(0, 0);
}

TEST(alignSlidingWindow, c3) {

    std::stack<char> SQ;
    std::stack<char> SD;
    int32_t matchingScore = 0;
    int32_t mismatchingPenalty = -3;
    int32_t open_gap_penalty1 = -4;
    int32_t extend_gap_penalty1 = -2;
    int32_t open_gap_penalty2 = -81;
    int32_t extend_gap_penalty2 = -1;

    std::ifstream infile("/media/bs674/ppi8t/testWAF/alignSorghumAgainstMaizeV4/newversions/towfadevelopper/test_seq");
    std::string refSeq = "";
    std::string querySeq = "";
    std::getline(infile, refSeq);
    std::getline(infile, querySeq);

    std::string _alignment_q;
    std::string _alignment_d;

    int64_t slidingWindowSize = 500;

    int32_t wfaSize = 250000;
    int32_t min_wavefront_length = 10000;
    int32_t max_distance_threshold = 10000;
    Scorei m(matchingScore, mismatchingPenalty);
    std::cout << "line 325" << std::endl;
    int64_t thiScore = alignSlidingWindow(querySeq, refSeq, _alignment_q, _alignment_d,
                                          slidingWindowSize, wfaSize, matchingScore, mismatchingPenalty,
                                          open_gap_penalty1, extend_gap_penalty1, open_gap_penalty2,
                                          extend_gap_penalty2, min_wavefront_length, max_distance_threshold, m);
    std::cout << _alignment_d << std::endl;
    std::cout << _alignment_q << std::endl;
    std::cout << thiScore << std::endl;
    ASSERT_EQ(0, 0);
}

void align(const char *tseq, const char *qseq, int sc_mch, int sc_mis, int gapo, int gape, std::string & refSeq, std::string & querySeq) {
    int8_t a = sc_mch, b = sc_mis < 0? sc_mis : -sc_mis; // a>0 and b<0
    int8_t mat[25] = { a,b,b,b,0, b,a,b,b,0, b,b,a,b,0, b,b,b,a,0, 0,0,0,0,0 };
    int tl = strlen(tseq), ql = strlen(qseq);
    uint8_t *ts, *qs, c[256];

    std::cout << "line 352 " << std::to_string(tl) << " " << std::to_string(ql) << std::endl;

    ksw_extz_t ez;
    std::cout << "line 355" << std::endl;
    memset(&ez, 0, sizeof(ksw_extz_t));
    std::cout << "line 357" << std::endl;
    memset(c, 4, 256);
    std::cout << "line 359" << std::endl;
    c['A'] = c['a'] = 0; c['C'] = c['c'] = 1;
    c['G'] = c['g'] = 2; c['T'] = c['t'] = 3; // build the encoding table
    std::cout << "line 362" << std::endl;
    ts = (uint8_t*)malloc(tl);
    qs = (uint8_t*)malloc(ql);
    std::cout << "line 365" << std::endl;
    int i;
    for (i = 0; i < tl; ++i) {
        ts[i] = c[(uint8_t) tseq[i]]; // encode to 0/1/2/3
    }
    for (i = 0; i < ql; ++i) {
        qs[i] = c[(uint8_t)qseq[i]];
    }
    std::cout << "line 369" << std::endl;
    ksw_extd2_sse(0, ql, qs, tl, ts, 5, mat, 4, 2, 81, 1, -1, -1, 0, 0, & ez);
    std::cout << "line 371" << std::endl;
    std::string cigarstring = "";
    for (i = 0; i < ez.n_cigar; ++i){ // print CIGAR
        printf("%d%c", ez.cigar[i]>>4, "MID"[ez.cigar[i]&0xf]);
        cigarstring = cigarstring + std::to_string(ez.cigar[i]>>4) + "MID"[ez.cigar[i]&0xf];
    }
    putchar('\n');

    std::vector<std::string> cigarElems;
    splitCIGAR(cigarstring, cigarElems);

    std::string _alignment_q = "";
    std::string _alignment_d = "";
    int pattern_pos = 0, text_pos = 0;

    std::cout << cigarstring << std::endl;
    std::cout << std::to_string(cigarElems.size()) << std::endl;

    for(i=0; i<cigarElems.size(); ++i) {
        std::string cVal = cigarElems[i];
        char cLetter = cVal[cVal.length() - 1];
        int cLen = stoi(cVal.substr(0, cVal.length() - 1));

        if (cLetter == 'M') {
            for (int j = 1; j <= cLen; ++j) {
                _alignment_q += querySeq[text_pos];
                _alignment_d += refSeq[pattern_pos];
                pattern_pos++;
                text_pos++;
            }
        } else if (cLetter == 'X') {
            for (int j = 1; j <= cLen; ++j) {
                _alignment_q += querySeq[text_pos];
                _alignment_d += refSeq[pattern_pos];
                pattern_pos++;
                text_pos++;
            }
        } else if (cLetter == 'I') {
            for (int j = 1; j <= cLen; ++j) {
                _alignment_q += querySeq[text_pos];
                _alignment_d += '-';
                text_pos++;
            }
        } else if (cLetter == 'D') {
            for (int j = 1; j <= cLen; ++j) {
                _alignment_q += '-';
                _alignment_d += refSeq[pattern_pos];
                pattern_pos++;
            }
        }
    }
    std::cout << _alignment_d << std::endl;
    std::cout << _alignment_q << std::endl;
    std::cout << std::to_string(ez.score) << std::endl;
    free(ez.cigar); free(ts); free(qs);
}

TEST(alignSlidingWindow, c4) {

    std::string refSeq = "act";
    std::string querySeq = "ACT";
    const char *pattern = refSeq.c_str();
    const char *text = querySeq.c_str();
    for (int i=0; i<500; i++) {
        align(pattern, text, 0, -3, 2, 1, refSeq, querySeq);
    }
    ASSERT_EQ(0, 0);
}
